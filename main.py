import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(_name_)

# ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò –¢–û–õ–¨–ö–û ID –ö–ê–ù–ê–õ–ê –ù–ê –†–ï–ê–õ–¨–ù–´–ô ‚ö†Ô∏è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = "@shkina_design"
CHANNEL_CHAT_ID = "-1002252990214"  # ‚¨ÖÔ∏è –ó–ê–ú–ï–ù–ò –ù–ê –†–ï–ê–õ–¨–ù–´–ô ID!

# üîó –°–°–´–õ–ö–ê –ù–ê –ö–ê–†–¢–ò–ù–ö–£ (—Ç–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞!)
WELCOME_IMAGE_URL = "https://i.postimg.cc/DzSnYfxS/photo-2025-10-30-21-09-06.jpg"

async def check_subscription(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        member = await context.bot.get_chat_member(CHANNEL_CHAT_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # üíï –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –° –ö–ê–†–¢–ò–ù–ö–û–ô
    welcome_text = """üíñ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ù–∞—Ç–∞—à–∞ –®–∫–∏–Ω–∞ 
–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä –∏ –±—å—é—Ç–∏-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥

–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ 30+ –Ω–µ–±–∞–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤!"""
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º
        await update.message.reply_photo(
            photo=WELCOME_IMAGE_URL,
            caption=welcome_text
        )
    except Exception as e:
        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
        await update.message.reply_text(welcome_text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if await check_subscription(user_id, context):
        await update.message.reply_text("üíñ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã! üéÄ")
    else:
        keyboard = [
            [InlineKeyboardButton("üíå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/shkina_design")],
            [InlineKeyboardButton("üå∏ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üéÅ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ 30+ –Ω–µ–±–∞–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤!", reply_markup=reply_markup)

async def check_subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if await check_subscription(user_id, context):
        await query.edit_message_text("üíñ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ø–∏—Å–∫—É –∏–∑ 30+ –Ω–µ–±–∞–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤! üéÄ")
    else:
        await query.edit_message_text("üíî –ù–µ –≤–∏–∂—É —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üå∏")

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(check_subscription_callback, pattern="check_subscription"))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7! üöÄ")
    application.run_polling()

if name == "main":
    main()